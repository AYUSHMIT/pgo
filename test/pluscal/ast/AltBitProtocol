------ MODULE AST -------
EXTENDS TLC
fairness == ""
 
ast == 
[type    |-> "multiprocess", 
 name  |-> "AltBitProtocol", 
 decls |-> <<[var |-> "input", eqOrIn |-> "=", val |-> << "<<", ">>" >>], 
             [var |-> "output", eqOrIn |-> "=", val |-> << "<<", ">>" >>], 
             [var |-> "msgChan", eqOrIn |-> "=", val |-> << "<<", ">>" >>], 
             [var |-> "ackChan", eqOrIn |-> "=", val |-> << "<<", ">>" >>], 
             [var |-> "newChan", eqOrIn |-> "=", val |-> << "<<", ">>" >>]>>,
 defs  |-> <<  >>,
 prcds |-> <<>>,
 procs |-> <<[name   |-> "Sender",
              fairness |-> "unfair", minusLabels |-> <<>>, plusLabels |-><<>>, proceduresCalled |-><<>>,
              eqOrIn |-> "=",
              id     |-> << "\"", "S", "\"" >>,
              decls  |-> <<[var |-> "next", eqOrIn |-> "=", val |-> << "1" >>], 
                           [var |-> "sbit", eqOrIn |-> "=", val |-> << "0" >>], 
                           [var |-> "ack", eqOrIn |-> "=", val |-> << "defaultInitValue" >>]>>,
              body   |-> <<[label |-> "s",
                            stmts |-> <<[type    |-> "while", 
                                         test    |-> << "TRUE" >>,
                                         labDo   |-> <<>>,
                                         unlabDo |-> <<[type |-> "either", 
                                                        ors  |-> << <<[type   |-> "with", 
                                                                       var    |-> "m",
                                                                       eqOrIn |-> "\\in",
                                                                       exp    |-> << "Msg" >>,
                                                                       do     |-> <<[type |-> "assignment",
                                                                                     ass  |-> <<[lhs |-> [var |-> "input", sub |-> <<  >>],
                                                                                                 rhs |-> << "Append", "(", "input", ",", "m", ")" >>]>>]>>]>>, 
                                                                    <<[type |-> "when", 
                                                                       exp |-> << "next", "<=", "Len", "(", "input", ")" >>], 
                                                                      [type |-> "assignment",
                                                                       ass  |-> <<[lhs |-> [var |-> "msgChan", sub |-> <<  >>],
                                                                                   rhs |-> << "Append", "(", "msgChan", ",", "(", "<<", "input", "[", "next", "]", ",", "sbit", ">>", ")", ")" >>]>>]>>, 
                                                                    <<[type |-> "when", 
                                                                       exp |-> << "ackChan", "#", "<<", ">>" >>], 
                                                                      [type |-> "assignment",
                                                                       ass  |-> <<[lhs |-> [var |-> "ack", sub |-> <<  >>],
                                                                                   rhs |-> << "Head", "(", "ackChan", ")" >>]>>], 
                                                                      [type |-> "assignment",
                                                                       ass  |-> <<[lhs |-> [var |-> "ackChan", sub |-> <<  >>],
                                                                                   rhs |-> << "Tail", "(", "ackChan", ")" >>]>>], 
                                                                      [type    |-> "if", 
                                                                       test    |-> << "ack", "=", "sbit" >>,
                                                                       then |-> <<[type |-> "assignment",
                                                                                   ass  |-> <<[lhs |-> [var |-> "next", sub |-> <<  >>],
                                                                                               rhs |-> << "next", "+", "1" >>]>>], 
                                                                                  [type |-> "assignment",
                                                                                   ass  |-> <<[lhs |-> [var |-> "sbit", sub |-> <<  >>],
                                                                                               rhs |-> << "(", "sbit", "+", "1", ")", "%", "2" >>]>>]>>,
                                                                       else |-> <<>>]>> >>], 
                                                       [type |-> "print", 
                                                        exp |-> << "<<", "\"", "Sender", "\"", ",", "input", ">>" >>]>>]>>]>>], 
             [name   |-> "Receiver",
              fairness |-> "unfair", minusLabels |-> <<>>, plusLabels |-><<>>, proceduresCalled |-><<>>,
              eqOrIn |-> "=",
              id     |-> << "\"", "R", "\"" >>,
              decls  |-> <<[var |-> "rbit", eqOrIn |-> "=", val |-> << "1" >>], 
                           [var |-> "msg", eqOrIn |-> "=", val |-> << "defaultInitValue" >>]>>,
              body   |-> <<[label |-> "r",
                            stmts |-> <<[type    |-> "while", 
                                         test    |-> << "TRUE" >>,
                                         labDo   |-> <<>>,
                                         unlabDo |-> <<[type |-> "either", 
                                                        ors  |-> << <<[type |-> "assignment",
                                                                       ass  |-> <<[lhs |-> [var |-> "ackChan", sub |-> <<  >>],
                                                                                   rhs |-> << "Append", "(", "ackChan", ",", "rbit", ")" >>]>>]>>, 
                                                                    <<[type |-> "when", 
                                                                       exp |-> << "msgChan", "#", "<<", ">>" >>], 
                                                                      [type |-> "assignment",
                                                                       ass  |-> <<[lhs |-> [var |-> "msg", sub |-> <<  >>],
                                                                                   rhs |-> << "Head", "(", "msgChan", ")" >>]>>], 
                                                                      [type |-> "assignment",
                                                                       ass  |-> <<[lhs |-> [var |-> "msgChan", sub |-> <<  >>],
                                                                                   rhs |-> << "Tail", "(", "msgChan", ")" >>]>>], 
                                                                      [type    |-> "if", 
                                                                       test    |-> << "msg", "[", "2", "]", "#", "rbit" >>,
                                                                       then |-> <<[type |-> "assignment",
                                                                                   ass  |-> <<[lhs |-> [var |-> "rbit", sub |-> <<  >>],
                                                                                               rhs |-> << "(", "rbit", "+", "1", ")", "%", "2" >>]>>], 
                                                                                  [type |-> "assignment",
                                                                                   ass  |-> <<[lhs |-> [var |-> "output", sub |-> <<  >>],
                                                                                               rhs |-> << "Append", "(", "output", ",", "msg", "[", "1", "]", ")" >>]>>]>>,
                                                                       else |-> <<>>]>> >>]>>]>>]>>], 
             [name   |-> "LoseMsg",
              fairness |-> "unfair", minusLabels |-> <<>>, plusLabels |-><<>>, proceduresCalled |-><<>>,
              eqOrIn |-> "=",
              id     |-> << "\"", "L", "\"" >>,
              decls  |-> <<>>,
              body   |-> <<[label |-> "l",
                            stmts |-> <<[type    |-> "while", 
                                         test    |-> << "TRUE" >>,
                                         labDo   |-> <<>>,
                                         unlabDo |-> <<[type |-> "either", 
                                                        ors  |-> << <<[type   |-> "with", 
                                                                       var    |-> "i",
                                                                       eqOrIn |-> "\\in",
                                                                       exp    |-> << "1", "..", "Len", "(", "msgChan", ")" >>,
                                                                       do     |-> <<[type |-> "assignment",
                                                                                     ass  |-> <<[lhs |-> [var |-> "msgChan", sub |-> <<  >>],
                                                                                                 rhs |-> << "Remove", "(", "i", ",", "msgChan", ")" >>]>>]>>]>>, 
                                                                    <<[type   |-> "with", 
                                                                       var    |-> "i",
                                                                       eqOrIn |-> "\\in",
                                                                       exp    |-> << "1", "..", "Len", "(", "ackChan", ")" >>,
                                                                       do     |-> <<[type |-> "assignment",
                                                                                     ass  |-> <<[lhs |-> [var |-> "ackChan", sub |-> <<  >>],
                                                                                                 rhs |-> << "Remove", "(", "i", ",", "ackChan", ")" >>]>>]>>]>> >>]>>]>>]>>]>>]
==========================
